/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import db.CRUDMonitor;
import entidade.Monitor;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author murilo.portugal
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    
    private final CRUDMonitor crudMonitor;
    private final List<Monitor> listMonitor;
    private DefaultListModel defaultListModel;
    private DefaultCategoryDataset dcd;
    private JFreeChart freeChart;
    private ChartPanel chartPnl;
    
    public Principal() {
        initComponents();
        jListMonitor.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.crudMonitor = new CRUDMonitor();
        this.listMonitor = crudMonitor.getAllMonitor(true);
        this.defaultListModel = new DefaultListModel();
        this.dcd = new DefaultCategoryDataset();
        carregaListaeGraficoGeral();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPLista = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListMonitor = new javax.swing.JList();
        jPGrafico = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jListMonitor.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListMonitor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMonitorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListMonitor);

        javax.swing.GroupLayout jPListaLayout = new javax.swing.GroupLayout(jPLista);
        jPLista.setLayout(jPListaLayout);
        jPListaLayout.setHorizontalGroup(
            jPListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPListaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPListaLayout.setVerticalGroup(
            jPListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPListaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPGrafico.setLayout(new javax.swing.BoxLayout(jPGrafico, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListMonitorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMonitorMouseClicked
        Monitor monitor = (Monitor) jListMonitor.getSelectedValue();
        carregaGraficoTempo(monitor.getPathFile());
    }//GEN-LAST:event_jListMonitorMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Principal().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jListMonitor;
    private javax.swing.JPanel jPGrafico;
    private javax.swing.JPanel jPLista;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void carregaListaeGraficoGeral() {
        listMonitor.stream().forEach((monit) -> {
            //Monta as informações do grafico
            if (monit.getDirectorySizeGB()>5  && //tira do grafico pastas menores que 5gb
                    !monit.getPathFile().equals("d:\\")&&
                    !monit.getPathFile().equals("d:\\$RECYCLE.BIN")&&
                    !monit.getPathFile().equals("d:\\System Volume Information")&&
                    !monit.getPathFile().equals("d:\\Wallpaper")&&
                    !monit.getPathFile().equals("d:\\usuários\\")&&
                    !monit.getPathFile().equals("d:\\Usuários")&&
                    !monit.getPathFile().equals("d:\\Biblioteca")&&
                    !monit.getPathFile().equals("d:\\Documentos")&&
                    !monit.getPathFile().equals("d:\\RECYCLER")) {
                
                this.defaultListModel.addElement(monit);
                            
                String linha = monit.getPathFile().substring(monit.getPathFile().lastIndexOf("\\")+1, monit.getPathFile().length());
                String coluna = monit.getDataCriacao().substring(0, 10);
                this.dcd.setValue(monit.getDirectorySizeGB(), linha, coluna);
            }
            
        }); 
        this.jListMonitor.setModel(defaultListModel);
        this.freeChart = ChartFactory.createBarChart3D("Utilização por pasta", "Tamanho (Giga)", "Data", dcd,PlotOrientation.VERTICAL,true,true,true);
        this.chartPnl = new ChartPanel(freeChart);
        this.jPGrafico.removeAll();
        this.jPGrafico.add(chartPnl);
        this.jPGrafico.updateUI();
    }

    private void carregaGraficoTempo(String pathFile) {
        List<Monitor> simpleMonitor = crudMonitor.getMonitor(pathFile);
        TimeSeriesCollection timeCollection = new TimeSeriesCollection();
        TimeSeries timeSeries = new TimeSeries("Teste1");
        simpleMonitor.stream().forEach((monit)->{
            
            String linha = monit.getPathFile().substring(monit.getPathFile().lastIndexOf("\\")+1, monit.getPathFile().length());
            String data = monit.getDataCriacao().substring(0, 10);
            SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
            try {
                Date newDate = dateFormatter.parse(data);
                timeSeries.add(new Day(newDate),monit.getDirectorySizeGB());
            } catch (ParseException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        timeCollection.addSeries(timeSeries);
        XYDataset dataset = timeCollection;
        
        this.freeChart = ChartFactory.createTimeSeriesChart("Gráfico por Tempo", "Data", "Tamanho", dataset, true,true,false);
        this.chartPnl = new ChartPanel(freeChart);
        this.jPGrafico.removeAll();
        this.jPGrafico.add(chartPnl);
        this.jPGrafico.updateUI();
    }

}
