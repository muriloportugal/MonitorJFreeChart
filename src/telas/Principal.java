/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import db.CRUDMonitor;
import entidade.Monitor;
import entidade.MonitorModelo;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import monitorjfreechart.Graficos;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
/**
 *
 * @author murilo.portugal
 */
public class Principal extends javax.swing.JFrame {
    
    private final CRUDMonitor crudMonitor;
    private final ArrayList<Monitor> listAllMonitor;
    private final ArrayList<Monitor> listAllMonitorAndTime;
    private final ArrayList<String> removerMonitor;
    private final DefaultCategoryDataset dcd;
    private final DefaultPieDataset pizzaDataset;
    private JFreeChart freeChart;
    private ChartPanel chartPnl;
    private String pathFileTime = "";
    private TimeSeries timeSeries;
    private final TimeSeriesCollection timeSeriesCollection;
    
    public Principal() {
        initComponents();
        this.jPMenu.setLayout(new BoxLayout(jPMenu, BoxLayout.Y_AXIS));
        
        //Inicializa os objetos para recuperar os dados do banco
        this.crudMonitor = new CRUDMonitor();
        
        //Carrega os dados na variavel listAllMonitor
        //Exclui a pasta da raiz d:\\usuários\ por estar duplicada.
        this.listAllMonitor = new ArrayList<>();
        this.crudMonitor.getAllMonitor(true).forEach((monit)->{
            if(!monit.getPathFileClear().equals(""))this.listAllMonitor.add(monit);
        });
        this.listAllMonitorAndTime = new ArrayList<>();
        this.crudMonitor.getAllMonitor(false).forEach((monit)->{
            if(!monit.getPathFileClear().equals(""))this.listAllMonitorAndTime.add(monit);
        });
        
        //Cria a tabela do menu e adiciona no panel jPMenu
        this.removerMonitor = new ArrayList<>();
        this.jPMenu.add(new JScrollPane(carregaTabelaMenu()));
        
        this.dcd = new DefaultCategoryDataset();
        this.pizzaDataset = new DefaultPieDataset();
        this.timeSeriesCollection = new TimeSeriesCollection();
        carregaDatasets();
        this.timeSeriesCollection.setDomainIsPointsInTime(true);
        Graficos graficos = new Graficos();
        this.jTabbedPane1.add("Grafico Pizza",graficos.getGraficoPizza(pizzaDataset, "Utilização Atual"));
        this.jTabbedPane1.add("Grafico Barras", graficos.getGraficoColunas(this.dcd, "Utilização Atual", "Data", "Tamanho (GB)"));
        this.jTabbedPane1.add("Grafico Tempo",graficos.getGraficoSeriesTempo(timeSeriesCollection, "Consumo por tempo", "Data", "Tamanho (GB)"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPMenu = new javax.swing.JPanel();
        jPGrafico = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPMenuLayout = new javax.swing.GroupLayout(jPMenu);
        jPMenu.setLayout(jPMenuLayout);
        jPMenuLayout.setHorizontalGroup(
            jPMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 207, Short.MAX_VALUE)
        );
        jPMenuLayout.setVerticalGroup(
            jPMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPGrafico.setLayout(new javax.swing.BoxLayout(jPGrafico, javax.swing.BoxLayout.LINE_AXIS));
        jPGrafico.add(jTabbedPane1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                    .addComponent(jPMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPGrafico;
    private javax.swing.JPanel jPMenu;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    
    private JTable carregaTabelaMenu() {
        //Inicializa a tabela do menu
        TableModelMonitor modelMonitor = new TableModelMonitor(listAllMonitor);
        JTable table = new JTable(modelMonitor);
        table.setFont(new Font(" ", Font.BOLD, 14));
        table.setVisible(true);
        //Oculta a coluna da tabela.
        table.removeColumn(table.getColumnModel().getColumn(TableModelMonitor.CAMINHOCOMPLETO));
        //Permite selecionar somente uma coluna
        table.setColumnSelectionAllowed(true);
        //Permite somente uma selecao por vez
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Cria o evento de click;
        table.addMouseListener(new MouseAdapter() { 

            @Override
            public void mouseClicked(MouseEvent e) {
                if(table.getSelectedColumn()==TableModelMonitor.OCULTAR){
                    MonitorModelo monitMod = modelMonitor.getMonitorValueAt(table.getSelectedRow());
                    
                    if(!monitMod.isOculto()){
                        removerMonitor.remove(monitMod.getPathFile());
                    }else{
                        removerMonitor.add(monitMod.getPathFile());
                    }
                    carregaDatasets();
                }
            }
        });
        //Evento caso o usuário selecione com a barra de espaço
        table.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (String.valueOf(e.getKeyChar()).equals(" ")&&
                    table.getSelectedColumn()==TableModelMonitor.OCULTAR) {
                    
                    MonitorModelo monitMod = modelMonitor.getMonitorValueAt(table.getSelectedRow());
                    if(monitMod.isOculto()){
                        table.setValueAt(false, table.getSelectedRow(), table.getSelectedColumn());
                        removerMonitor.remove(monitMod.getPathFile());
                        carregaDatasets();
                    }else{
                        table.setValueAt(true, table.getSelectedRow(), table.getSelectedColumn());
                        removerMonitor.add(monitMod.getPathFile());
                        carregaDatasets();
                    }
                }
            }
            
        });
        return table;
    }

    private void carregaDatasets() {
        this.dcd.clear();
        this.pizzaDataset.clear();
        if(this.timeSeries!=null){
            this.timeSeries.clear();
            this.timeSeriesCollection.removeAllSeries();
        }
        listAllMonitor.stream().forEach((monit) -> {
            //Remove do grafico as pastas selecionadas e a pasta usuários da raiz.
            if (!removerMonitor.contains(monit.getPathFile())) {
                String linha = monit.getPathFileClear();
                String coluna = monit.getDataCriacao().substring(0, 10);
                //Monta o dataset do grafico de barras
                this.dcd.setValue(monit.getDirectorySizeGB(), linha, coluna);
                //Monta o dataset do grafico de pizza
                this.pizzaDataset.setValue(monit.getPathFileClear(), monit.getDirectorySizeGB()); 
            }
        });
        //Cria o data set do grafico de tempo
        this.listAllMonitorAndTime.forEach((monit)->{
            //Remove do grafico as pastas selecionadas e a pasta usuários da raiz.
            if(!removerMonitor.contains(monit.getPathFile())){
                //Monta o dataset do grafico de tempo
                if(!this.pathFileTime.equals(monit.getPathFile())){
                    if (!this.pathFileTime.equals("")){
                        //Toda vez que mudar de pasta salva na coleção antes de iniciar outra
                        this.timeSeriesCollection.addSeries(this.timeSeries);
                    }
                    this.timeSeries = new TimeSeries(monit.getPathFileClear(),Day.class);
                    this.timeSeries.add(new Day(String2Date(monit.getDataCriacao().substring(0, 10))), monit.getDirectorySizeGB());
                    this.pathFileTime = monit.getPathFile();
                }else{
                    this.timeSeries.add(new Day(String2Date(monit.getDataCriacao().substring(0, 10))), monit.getDirectorySizeGB());
                }
            }
        });
    }
    
    private Date String2Date(String data){
        SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
        Date dataFormatada=null;
        try {
            dataFormatada = dateFormatter.parse(data);
        } catch (ParseException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataFormatada;
    }

}
