/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import db.CRUDMonitor;
import entidade.Monitor;
import java.awt.BorderLayout;
import java.awt.Font;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author murilo.portugal
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    
    private final CRUDMonitor crudMonitor;
    private final List<Monitor> listMonitor;
    private final DefaultListModel<Monitor> defaultListModel;
    private final DefaultCategoryDataset dcd;
    private JFreeChart freeChart;
    private ChartPanel chartPnl;
    private TimeSeries timeSeries;
    private JList<Monitor> jListMonitor;
    private String pathFileTime = "";
    private DefaultPieDataset pieDataset;
    
    public Principal() {
        initComponents();
        this.jListMonitor = new JList<>();
        this.jListMonitor.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.jListMonitor.setFont(new Font(" ", Font.BOLD, 14));
        this.jPLista.setLayout(new BorderLayout());
        this.jPLista.add(this.jListMonitor);
        this.crudMonitor = new CRUDMonitor();
        this.listMonitor = crudMonitor.getAllMonitor(true);
        this.defaultListModel = new DefaultListModel<>();
        this.dcd = new DefaultCategoryDataset();
        carregaGraficoUsoAtual();
        carregaGraficoTempo();
        carregaGraficoPizza();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPLista = new javax.swing.JPanel();
        jPGrafico = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPListaLayout = new javax.swing.GroupLayout(jPLista);
        jPLista.setLayout(jPListaLayout);
        jPListaLayout.setHorizontalGroup(
            jPListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 207, Short.MAX_VALUE)
        );
        jPListaLayout.setVerticalGroup(
            jPListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 455, Short.MAX_VALUE)
        );

        jPGrafico.setLayout(new javax.swing.BoxLayout(jPGrafico, javax.swing.BoxLayout.LINE_AXIS));
        jPGrafico.add(jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPGrafico;
    private javax.swing.JPanel jPLista;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void carregaGraficoUsoAtual() {
        listMonitor.stream().forEach((monit) -> {
            
            if (monit.getDirectorySizeGB()>5  && //tira do grafico pastas menores que 5gb
                    !monit.getPathFile().equals("d:\\")&&
                    !monit.getPathFile().equals("d:\\$RECYCLE.BIN")&&
                    !monit.getPathFile().equals("d:\\System Volume Information")&&
                    !monit.getPathFile().equals("d:\\Wallpaper")&&
                    !monit.getPathFile().equals("d:\\usuários\\")&&
                    !monit.getPathFile().equals("d:\\Usuários")&&
                    !monit.getPathFile().equals("d:\\Biblioteca")&&
                    !monit.getPathFile().equals("d:\\Documentos")&&
                    !monit.getPathFile().equals("d:\\RECYCLER")) {
                
                this.defaultListModel.addElement(monit);
                            
                String linha = monit.getPathFileClear();
                String coluna = monit.getDataCriacao().substring(0, 10);
                //Monta o dataset do grafico
                this.dcd.setValue(monit.getDirectorySizeGB(), linha, coluna);
            }
            
        }); 
        this.jListMonitor.setModel(defaultListModel);
        //Cria o grafico
        this.freeChart = ChartFactory.createBarChart3D("Utilização por pasta", "Tamanho (Giga)", "Data", dcd,PlotOrientation.VERTICAL,true,true,true);
        //Adiciona o grafico a este panel para que possa ser exibido.
        this.chartPnl = new ChartPanel(freeChart);
        jTabbedPane1.add("Gráfico utilização Atual",chartPnl);
    }

    private void carregaGraficoTempo() {
        List<Monitor> tempMonitor = crudMonitor.getAllMonitor(false);
        TimeSeriesCollection timeCollection = new TimeSeriesCollection();

        tempMonitor.stream().forEach((Monitor monit)->{
            String nomePasta = monit.getPathFileClear();
            String data = monit.getDataCriacao().substring(0, 10);
            SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
            if (monit.getDirectorySizeGB()>5  && //tira do grafico pastas menores que 5gb
                    !monit.getPathFile().equals("d:\\")&& //remove diretorios do sistema ou sem importancia.
                    !monit.getPathFile().equals("d:\\$RECYCLE.BIN")&&
                    !monit.getPathFile().equals("d:\\System Volume Information")&&
                    !monit.getPathFile().equals("d:\\Wallpaper")&&
                    !monit.getPathFile().equals("d:\\usuários\\")&&
                    !monit.getPathFile().equals("d:\\Usuários")&&
                    !monit.getPathFile().equals("d:\\Biblioteca")&&
                    !monit.getPathFile().equals("d:\\Documentos")&&
                    !monit.getPathFile().equals("d:\\RECYCLER")) {
                
                if (!this.pathFileTime.equals(monit.getPathFile())) {
                    if (!this.pathFileTime.equals("")) {
                        //Toda vez que mudar de pasta salva na colecao antes de iniciar outra
                        timeCollection.addSeries(this.timeSeries);
                    }
                    this.timeSeries = new TimeSeries(nomePasta);
                    try {
                        Date newDate = dateFormatter.parse(data);
                        //Guarda as informacoes pra depois montar o dataset do grafico
                        this.timeSeries.add(new Day(newDate),monit.getDirectorySizeGB());
                    } catch (ParseException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.pathFileTime = monit.getPathFile();
                }else{
                    try {
                        Date newDate = dateFormatter.parse(data);
                        //Guarda as informacoes pra depois montar o dataset do grafico
                        this.timeSeries.add(new Day(newDate),monit.getDirectorySizeGB());
                    } catch (ParseException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
        });
        
        //timeCollection.addSeries(t1);
        XYDataset dataset = timeCollection;
        
        this.freeChart = ChartFactory.createTimeSeriesChart("Gráfico por Tempo", "Data", "Tamanho", dataset, true,true,true);
        XYPlot plot = this.freeChart.getXYPlot();
        plot.setWeight(300);
//        plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible(true);
        
        final XYItemRenderer renderer = plot.getRenderer();
        if (renderer instanceof StandardXYItemRenderer) {
            final StandardXYItemRenderer rr = (StandardXYItemRenderer) renderer;
            //rr.setPlotShapes(true);
            rr.setShapesFilled(true);
            rr.setItemLabelsVisible(true);
        }
        this.chartPnl = new ChartPanel(freeChart);
        this.jTabbedPane1.add("Gráfico por tempo", chartPnl);
    }

    private void carregaGraficoPizza() {
        this.pieDataset = new DefaultPieDataset();
        this.listMonitor.stream().forEach((Monitor monit)->{
             
            if (monit.getDirectorySizeGB()>5  && //tira do grafico pastas menores que 5gb
                    !monit.getPathFile().equals("d:\\")&& //remove diretorios do sistema ou sem importancia.
                    !monit.getPathFile().equals("d:\\$RECYCLE.BIN")&&
                    !monit.getPathFile().equals("d:\\System Volume Information")&&
                    !monit.getPathFile().equals("d:\\Wallpaper")&&
                    !monit.getPathFile().equals("d:\\usuários\\")&&
                    !monit.getPathFile().equals("d:\\Usuários")&&
                    !monit.getPathFile().equals("d:\\Biblioteca")&&
                    !monit.getPathFile().equals("d:\\Documentos")&&
                    !monit.getPathFile().equals("d:\\RECYCLER")) {
                this.pieDataset.setValue(monit.getPathFileClear(), monit.getDirectorySizeGB());
             }
        });
        this.freeChart = ChartFactory.createPieChart("Utilização Atual", this.pieDataset, true, true, false);
        PieSectionLabelGenerator labelGenerator = new StandardPieSectionLabelGenerator("{0}: ({1}GB,{2})");
        PiePlot plot = (PiePlot) this.freeChart.getPlot();
        plot.setLabelGenerator(labelGenerator);
        this.chartPnl = new ChartPanel(freeChart);
        this.jTabbedPane1.add("Utilização atual",this.chartPnl);
    }

}
